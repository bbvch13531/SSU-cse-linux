extern char **environ
char **envp
putenv("TZ=PST8PDT")
putenv("WARNING=Don't use envp after putenv()")
geten("WARNING")
exec("find", args, (void *)0)
wait3(&status, 0, rusage)
WIFEXITED(stat)
WIFSIGNALED(stat)

#include <time.h>
execlp("date", "date", (void *)0)
execlp("who", "who", (void *)0)
(pid = getpid()) == 0
struct tms
(start = times(&tms_start)) == 0
(end = times(&tms_end)) == 0
#include <pthread.h>

tid = pthread_self()
-lpthread
#include <pthread.h>
pthread_create(&tid1, NULL, ssu_thread1, NULL) != 0
pthread_create(&tid2, NULL, ssu_thread2, NULL) != 0
pthread_join(tid1, NULL)
pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER
pthread_cond_t cond = PTHREAD_COND_INITIALIZER
pthread_cond_wait(&cond, &lock)
glo_val < VALUE_STOP1 || glo_val > VALUE_STOP2
pthread_cond_signal(&cond)
(val = fcntl(fd, F_GETFL, 0)) == -1
val |= O_NONBLOCK
fcntl(fd, F_SETFL, val) == -1
val &= ~O_NONBLOCK

(fd1 = open(filename, O_RDWR)) < 0
(flag = fcntl(fd1, F_SETFD, 0)) == -1
flag & O_APPEND
flag & FD_CLOEXEC
#include <signal.h>
sigset_t
sigemptyset(&sig_set)
sigaddset(&sig_set, SIGINT)
sigprocmask(SOG_BLOCK, &sig_set, NULL)
